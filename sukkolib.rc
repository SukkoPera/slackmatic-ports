#!/bin/rc

DEFAULT_MAKEJOBS=3
DEFAULT_DOCS=(ABOUT-NLS AUTHORS ChangeLog COPYING INSTALL NEWS README TODO)
# These are defined in /etc/slackmatic/slackmat.conf!!!
#DEFAULT_CFLAGS='-pipe -fomit-frame-pointer -funit-at-a-time'
DEFAULT_CONFOPTS=(
	--prefix'='/usr
	--sysconfdir'='/etc
	--localstatedir'='/var
	--mandir'='/usr/man
	--disable-dependency-tracking
)
DEFAULT_CONFOPTS_CMAKE=(
	-D CMAKE_INSTALL_PREFIX'='/usr
)
MAXPATCHLEVEL=5

SOURCEFORGE_MIRRORS=(
	http://garr.dl.sourceforge.net/sourceforge
	http://heanet.dl.sourceforge.net/sourceforge
	http://puzzle.dl.sourceforge.net/sourceforge
	http://kent.dl.sourceforge.net/sourceforge
)

# TODO
# + Build from CVS
# - Install icon
# + Build Python modules
# - Add user?
# - Build packages with several progs (You know what I mean)
# - Include patches in package?
# ~ Sourceforge srcs
# - Handle conf files

fn std_configure {
	if (~ $CONFOPTS'X' 'X') {
		CONFOPTS=$DEFAULT_CONFOPTS
	}

	./configure $CONFOPTS || exit 100
}


fn std_compile {
	if (~ $MAKEJOBS'X' 'X') {
		MAKEJOBS=$DEFAULT_MAKEJOBS
	}

	trace 'Using '$MAKEJOBS' parallel job(s) for make'

	# Handle CMake out-of-tree builds
        if (!~ $CMAKE_PKG_BUILD_DIR'X' 'X') {
		trace 'CDing to CMake build directory: '$CMAKE_PKG_BUILD_DIR
                cd $CMAKE_PKG_BUILD_DIR
        }
	
	make -j $MAKEJOBS || exit 101

	#  CMake again
        if (!~ $CMAKE_PKG_BUILD_DIR'X' 'X') {
                cd ..
        }
}


fn std_inst {
	# Handle CMake out-of-tree builds
        if (!~ $CMAKE_PKG_BUILD_DIR'X' 'X') {
		trace 'CDing to CMake build directory: '$CMAKE_PKG_BUILD_DIR
                cd $CMAKE_PKG_BUILD_DIR
        }

	make install DESTDIR'='$PKG || exit 102

	#  CMake again
        if (!~ $CMAKE_PKG_BUILD_DIR'X' 'X') {
                cd ..
        }
}


# Returns the filesize of a filename
# Helper function
fn filesize {
	filename=$1
	#filesize=`{ls -l $filename | awk '{print $5}'}
	filesize=`{stat -c %s $filename}
	
	echo $filesize
}


fn std_docinst {
	if (~ $DOCS'X' 'X') {
		DOCS=$DEFAULT_DOCS
	}

	# This needs testing
	#for (f in `{eval echo $DOCS}) {
	for (f in $DOCS) {
#		f=`{eval echo $f}
		if (test -f $f && test `{filesize $f} -gt 0) {
# 			trace 'Installing doc: '$f' in: '$DOC
			install -m 0644 $f $DOC
		} else {
			trace 'Skipping doc: '$f
		}
	}
}


fn std_patch {
	for (pf in $PATCHES) {
		# WARNING: Changed this on 08/05/2008, might break earlier stuff
		pf=$CWD/$pf
		trace 'Applying patch: '$pf
		
		done=0
		l=0
		while (test $done -ne 1 -a $l -lt $MAXPATCHLEVEL) {
#			if (patch < $pf -s -f -p $l --dry-run >[1=] >[2=]) {
#			echo 'l = ' $l
			if (patch < $pf -s -f -p $l --dry-run >[1=] >[2=]) {
				done=1
			} else {
				l=`{expr $l + 1}
			}
		}
		if (test $l -lt $MAXPATCHLEVEL) {
			# Appropriate patchlevel found, apply patch
			trace 'Patch will be applied with -p '$l
			patch < $pf --verbose -f -p $l || exit 7
		} else {
			# Could not find patchlevel, error!
			error 'Could not automatically find appropriate patchlevel'
			exit 5
		}
	}
}


fn rcs_source {
	cp -r $CWD/$RCSSOURCE $SRC/$NAME-$RELEASE
}


fn setup {
	if (!~ $RCSSOURCE'X' 'X') {
		rcs_source
	}

	if (!~ $BUILDDIR'X' 'X') {
		mv $SRC/$BUILDDIR $SRC/$NAME-$RELEASE || exit $status
	}
	
	cd $SRC/$NAME-$RELEASE || exit $status
	std_patch
}


fn std_build {
	setup

	if (whatis -f configure >/dev/null >[2=1]) {
		configure
	} else {
		trace 'Standard configure function called'
		std_configure
	}
	
	if (whatis -f compile >/dev/null >[2=1]) {
		compile
	} else {
		trace 'Standard compile function called'
		std_compile
	}
	
	if (whatis -f inst >/dev/null >[2=1]) {
		inst
	} else {
		trace 'Standard inst function called'
		std_inst
	}
	
	if (whatis -f docinst >/dev/null >[2=1]) {
		docinst
	} else {
		trace 'Standard docinst function called'
		std_docinst
	}
}


fn build {
	trace 'Standard build function called'
	std_build
}

### CMAKE STUFF ###

fn std_configure_cmake {
	if (~ $CONFOPTS'X' 'X') {
		CONFOPTS=$DEFAULT_CONFOPTS_CMAKE
	}

	CMAKE_PKG_BUILD_DIR=BUILD.$pid
	mkdir $CMAKE_PKG_BUILD_DIR || exit $status
	cd $CMAKE_PKG_BUILD_DIR || exit $status
	cmake \
		$CONFOPTS \
		..
	cd ..
}

fn std_build_cmake {
	setup

	if (whatis -f configure >/dev/null >[2=1]) {
		configure
	} else {
		trace 'Standard CMAKE configure function called'
		std_configure_cmake
	}
	
	if (whatis -f compile >/dev/null >[2=1]) {
		compile
	} else {
		trace 'Standard compile function called'
		std_compile
	}
	
	if (whatis -f inst >/dev/null >[2=1]) {
		inst
	} else {
		trace 'Standard inst function called'
		std_inst
	}
	
	if (whatis -f docinst >/dev/null >[2=1]) {
		docinst
	} else {
		trace 'Standard docinst function called'
		std_docinst
	}
}


### PYTHON STUFF ###

# Python packages compile and install automagically. We only need to install docs.

fn std_compile_python {
	python setup.py build || exit 101
}


fn std_inst_python {
	python setup.py install --root $PKG || exit 102
}


fn std_build_python {
	trace 'Standard Python build function called'

	setup
	std_compile_python
	std_inst_python

	if (whatis -f docinst >/dev/null >[2=1]) {
		docinst
	} else {
		trace 'Standard docinst function called'
		std_docinst
	}
}

### SCONS STUFF ###

# WARNING: SCons does not work with ccache, so make sure to turn it off as in:
# CC=/usr/bin/gcc CXX=/usr/bin/g++ slackmat-build

fn std_compile_scons {
	scons
}


fn std_inst_scons {
	scons install DESTDIR'='$PKG || exit 102
}


fn std_build_scons {
	trace 'Standard SCons build function called'

	setup
	std_compile_scons
	std_inst_scons

	if (whatis -f docinst >/dev/null >[2=1]) {
		docinst
	} else {
		trace 'Standard docinst function called'
		std_docinst
	}
}

#######################

# Set up things needed before calling 'build'
# Never call this function explicitly, please
fn prepare {	
	# If NAME is not set explicitly, use the name of the current directory
	if (~ $NAME'X' 'X') {
		NAME=`{basename `{pwd}}	
	}

	# Choose a random SourceForge mirror
	random -e $#SOURCEFORGE_MIRRORS
	rnd=`{expr $status + 1}		# Indexes in rc start from 1
	SF=$SOURCEFORGE_MIRRORS($rnd)

	# Get Slackware version
	#SLCKVER=`{cat /etc/slackware-version | cut -f2 -d ' ' | sed 's:\.0$::'}
	# The following is needed from 13.0 on, because trailing .0's have been added...
	SLCKVER=`{cat /etc/slackware-version | cut -f2 -d ' ' | sed -r 's:([0-9]+\.[0-9]+).+:\1:'}
}


### END OF FUNCTIONS ###

# Fail if this script is called directly
if (~ $TRACE_FILE'X' 'X') {
	echo 'This script is not meant to be called directly, but only from a BUILD.rc'
	exit 99
} else {
	# Otherwise, set things up
	prepare
}

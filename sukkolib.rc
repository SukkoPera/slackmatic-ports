#!/bin/rc

# CFLAGS are set in /etc/slackmatic/slackmat.conf!

# Guess library directory (shouldn't this be automatic?)
switch (`{arch}) {
	case *64
		LIB_SUFFIX=64
}
LIBDIR='/usr/lib'$LIB_SUFFIX

# Some more jobs than CPUs seems a good default
NCPU=`{cat /proc/cpuinfo  | grep '^processor' | wc -l}
DEFAULT_MAKEJOBS=`{expr $NCPU '*' 4 / 3}
DEFAULT_DOCS=(ABOUT-NLS AUTHORS ChangeLog COPYING INSTALL MAINTAINERS NEWS README TODO)
DEFAULT_CONFOPTS_AUTOTOOLS=(
	--prefix'='/usr
	--libdir'='$LIBDIR
	--sysconfdir'='/etc
	--localstatedir'='/var
	--mandir'='/usr/man
	--infodir'='/usr/info
	--disable-dependency-tracking
)
# How to specify libdir here?
DEFAULT_CONFOPTS_CMAKE=(
	-DCMAKE_INSTALL_PREFIX'='/usr
)
DEFAULT_CONFOPTS_SCONS=(
	PREFIX'='/usr
	CFLAGS'='$CFLAGS \
	DESTDIR'='$PKG
)
DEFAULT_CONFOPTS_WAF=(
	--prefix'='/usr
	--libdir'='$LIBDIR
	--mandir'='/usr/man
)
MAXPATCHLEVEL=5

SOURCEFORGE_MIRRORS=(
	http://garr.dl.sourceforge.net/sourceforge
	http://heanet.dl.sourceforge.net/sourceforge
	http://kent.dl.sourceforge.net/sourceforge
)
# This can be set (in ports) to:
# - autotools
# - cmake
# - scons
# - waf
# - python
# - makeonly
# Any other values will trigger autodetection of the build system in use
# Leave set to '' here
BUILDSYSTEM=''


# TODO
# + Build from CVS
# - Install icon
# + Build Python modules
# - Add user?
# - Build packages with several progs (You know what I mean)
# - Include patches in package?
# ~ Sourceforge srcs


###############################################################################
# GENERAL PURPOSE STUFF
###############################################################################

fn std_patches {
	for (pf in $PATCHES) {
		# WARNING: Changed this on 08/05/2008, might break earlier stuff
		pf=$CWD/$pf
		trace 'Applying patch: '$pf
		
		done=0
		l=0
		while (test $done -ne 1 -a $l -lt $MAXPATCHLEVEL) {
#			if (patch < $pf -s -f -p $l --dry-run >[1=] >[2=]) {
#			echo 'l = ' $l
			if (patch < $pf -s -f -p $l --dry-run >[1=] >[2=]) {
				done=1
			} else {
				l=`{expr $l + 1}
			}
		}
		if (test $l -lt $MAXPATCHLEVEL) {
			# Appropriate patchlevel found, apply patch
			trace 'Patch will be applied with -p '$l
			patch < $pf --verbose -f -p $l || exit 7
		} else {
			# Could not find patchlevel, error!
			error 'Could not automatically find appropriate patchlevel'
			exit 5
		}
	}
	
	#~ trace 'Patching done'
}

fn patches {
	trace 'Standard patches function called'
	std_patches
}

fn std_docinst {
	if (~ $DOCS'X' 'X') {
		DOCS=$DEFAULT_DOCS
	}

	# This needs testing
	#for (f in `{eval echo $DOCS}) {
	for (_f in $DOCS) {
#		f=`{eval echo $f}
		if (test -f $_f && test `{filesize $_f} -gt 0) {
# 			trace 'Installing doc: '$_f' in: '$DOC
			install -m 0644 $_f $DOC
		#~ } else {
			#~ trace 'Skipping doc: '$_f
		}
	}
}

fn docinst {
	trace 'Standard docinst function called'
	std_docinst
}

fn insticon {
	desktopfile=$1
	iconfile=$2
	
	if (!test -f $PKG/usr/share/applications) {
		mkdir -p $PKG/usr/share/applications
	}
	cp $desktopfile $PKG/usr/share/applications || exit 110

	if (!~ $iconfile'X' 'X') {
		if (!test -f $PKG/usr/share/pixmaps) {
			mkdir -p $PKG/usr/share/pixmaps
		}
		cp $iconfile $PKG/usr/share/pixmaps || exit 111
	}
}

fn rcs_source {
	cp -r $CWD/$RCSSOURCE $SRC/$NAME-$RELEASE
}

fn setup {
	if (!~ $RCSSOURCE'X' 'X') {
		rcs_source
	}

	if (!~ $BUILDDIR'X' 'X') {
		mv $SRC/$BUILDDIR $SRC/$NAME-$RELEASE || exit $status
	}

	cd $SRC/$NAME-$RELEASE || exit $status
	patches

	# Autodetect build system
	if (~ $BUILDSYSTEM 'autodetect') {
		if (test -f CMakeLists.txt) {
			trace 'Autodetected cmake build system'
			BUILDSYSTEM='cmake'
		} else if (test -f configure && test -f Makefile.in) {
			trace 'Autodetected autotools build system'
			BUILDSYSTEM='autotools'
		} else if (test -f SConstruct || test -f Sconstruct) {
			trace 'Autodetected scons build system'
			BUILDSYSTEM='scons'
		} else if (test -f setup.py) {
			trace 'Autodetected python build system'
			BUILDSYSTEM='python'
		} else if (test -f waf) {
			trace 'Autodetected waf build system'
			BUILDSYSTEM='waf'
		} else if (test -f Makefile || test -f makefile) {
			trace 'Autodetected makeonly build system'
			BUILDSYSTEM='makeonly'
		} else {
			error 'Cannot auto-detect build system'
			exit 88
		}
	}

	# Set CONFOPTS
	switch ($BUILDSYSTEM) {
		case cmake
			DEFAULT_CONFOPTS=$DEFAULT_CONFOPTS_CMAKE
		case scons
			DEFAULT_CONFOPTS=$DEFAULT_CONFOPTS_SCONS
		case waf
			DEFAULT_CONFOPTS=$DEFAULT_CONFOPTS_WAF
		case python
			# Nothing to do
		case *
			DEFAULT_CONFOPTS=$DEFAULT_CONFOPTS_AUTOTOOLS
	}
}

# Returns the filesize of a filename
# Helper function
fn filesize {
	filename=$1
	#filesize=`{ls -l $filename | awk '{print $5}'}
	filesize=`{stat -c %s $filename}
	
	echo $filesize
}


###############################################################################
# STANDARD WRAPPERS
###############################################################################

fn std_configure {
	if (~ $CONFOPTS'X' 'X') {
		CONFOPTS=$DEFAULT_CONFOPTS
	}
	
	switch ($BUILDSYSTEM) {
		case cmake
			std_configure_cmake
		case scons
			# Nothing to do
		case waf
			std_configure_waf
		case python
			# Nothing to do
		case makeonly
			# Nothing to do
		case *
			std_configure_autotools
	}
}

fn configure {
	trace 'Standard configure function called'
	std_configure
}

fn std_compile {
	if (~ $MAKEJOBS'X' 'X') {
		MAKEJOBS=$DEFAULT_MAKEJOBS
	}
	trace 'Using '$MAKEJOBS' parallel job(s) for compiling, if possible'

	switch ($BUILDSYSTEM) {
		case cmake
			std_compile_cmake
		case scons
			std_compile_scons
		case waf
			std_compile_waf
		case python
			std_compile_python
		# This includes makeonly
		case *
			std_compile_autotools
	}
}

fn compile {
	trace 'Standard compile function called'
	std_compile
}

fn std_inst {
	switch ($BUILDSYSTEM) {
		case cmake
			std_inst_cmake
		case scons
			std_inst_scons
		case waf
			std_inst_waf
		case python
			std_inst_python
		case *
			std_inst_autotools
	}
}

fn inst {
	trace 'Standard inst function called'
	std_inst
}

fn std_build {
	setup
	configure
	compile
	inst
	docinst
}

fn build {
	trace 'Standard build function called'

	# Say whether we want autodetection or not. We do it this way
	# since it must not be performed if a port overrides build().
	if (~ $BUILDSYSTEM'X' 'X') {
		BUILDSYSTEM='autodetect'
	}

	std_build
}


###############################################################################
# AUTOTOOLS STUFF
###############################################################################

fn std_configure_autotools {
	trace 'Running ./configure' $CONFOPTS
	./configure $CONFOPTS || exit 100
}

fn std_compile_autotools {
	make -j $MAKEJOBS || exit 101
}

fn std_inst_autotools {
	make install DESTDIR'='$PKG || exit 102
}


###############################################################################
# CMAKE STUFF
###############################################################################

fn std_configure_cmake {
	CMAKE_PKG_BUILD_DIR=BUILD.$pid
	mkdir $CMAKE_PKG_BUILD_DIR || exit $status
	cd $CMAKE_PKG_BUILD_DIR || exit $status
	cmake \
		$CONFOPTS \
		..
	cd ..
}

fn std_compile_cmake {
	# Handle out-of-tree builds
	if (!~ $CMAKE_PKG_BUILD_DIR'X' 'X') {
		trace 'CDing to CMake build directory: '$CMAKE_PKG_BUILD_DIR
		cd $CMAKE_PKG_BUILD_DIR
	}
	
	make -j $MAKEJOBS || exit 101

	# Back to the source tree
	if (!~ $CMAKE_PKG_BUILD_DIR'X' 'X') {
		cd ..
	}
}

fn std_inst_cmake {
	# Handle out-of-tree builds
	if (!~ $CMAKE_PKG_BUILD_DIR'X' 'X') {
		trace 'CDing to CMake build directory: '$CMAKE_PKG_BUILD_DIR
		cd $CMAKE_PKG_BUILD_DIR
	}

	make install DESTDIR'='$PKG || exit 102

	# Back to the source tree
	if (!~ $CMAKE_PKG_BUILD_DIR'X' 'X') {
		cd ..
	}
}


###############################################################################
# PYTHON STUFF
###############################################################################

# Python packages compile and install automagically. We only need to install docs.

fn std_compile_python {
	python setup.py build || exit 101
}

fn std_inst_python {
	python setup.py install --root $PKG || exit 102
}


###############################################################################
# SCONS STUFF
###############################################################################

# WARNING: SCons does not work with ccache, so make sure to turn it off as in:
# CC=/usr/bin/gcc CXX=/usr/bin/g++ slackmat-build

# Note that the "env" is mandatory, otherwise the dirty environment
# will make the build system misbehave (I am unsure if this is due to
# scons or to the way packages uses it).

fn std_compile_scons {
	env - \
		PATH'='$PATH \
		HOME'='$HOME \
	scons $CONFOPTS || exit 101
}

fn std_inst_scons {
	env - \
		PATH'='$PATH \
		HOME'='$HOME \
	scons install DESTDIR'='$PKG || exit 102
}


###############################################################################
# WAF STUFF
###############################################################################

# Note: It seems that WAF builds work properly only  when run as root,
# otherwise they will hang randomly with:
# semop(1): encountered an error: Identifier removed
#
# Thus, use sudo slackmat-build -R

fn std_configure_waf {
	./waf configure $CONFOPTS || exit 100
}

fn std_compile_waf {
	./waf build -j $MAKEJOBS || exit 101
}

fn std_inst_waf {
	./waf install --destdir'='$PKG || exit 102
}


###############################################################################

# Set up things needed before calling 'build'
# Never call this function explicitly, please
fn prepare {	
	# If NAME is not set explicitly, use the name of the current directory
	if (~ $NAME'X' 'X') {
		NAME=`{basename `{pwd}}	
	}

	# Choose a random SourceForge mirror
	random -e $#SOURCEFORGE_MIRRORS
	rnd=`{expr $status + 1}		# Indexes in rc start from 1
	SF=$SOURCEFORGE_MIRRORS($rnd)

	# Get Slackware version
	#SLCKVER=`{cat /etc/slackware-version | cut -f2 -d ' ' | sed 's:\.0$::'}
	# The following is needed from 13.0 on, because trailing .0's have been added...
	SLCKVER=`{cat /etc/slackware-version | cut -f2 -d ' ' | sed -r 's:([0-9]+\.[0-9]+).+:\1:'}

	# Set CONFOPTS so that ports can expand them
	switch ($BUILDSYSTEM) {
		case cmake
			DEFAULT_CONFOPTS=$DEFAULT_CONFOPTS_CMAKE
		case scons
			# Nothing to do
		case waf
			DEFAULT_CONFOPTS=$DEFAULT_CONFOPTS_WAF
		case python
			# Nothing to do
		case *
			DEFAULT_CONFOPTS=$DEFAULT_CONFOPTS_AUTOTOOLS
	}
}


### END OF FUNCTIONS ###

# Only proceed if this script is called from a BUILD.rc
if (!~ $TRACE_FILE'X' 'X') {
	prepare
}
